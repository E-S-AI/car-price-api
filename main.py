# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t4-JuNSKCYN2ln-Lu1LzIjkIBMViUxSZ
"""

from fastapi import FastAPI, HTTPException, Form
import joblib
import pandas as pd
from contextlib import asynccontextmanager

# --- إعداد التطبيق و Lifespan ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    try:
        app.state.model = joblib.load("model/best_car_price_predictor_model.joblib")
        app.state.model_columns = joblib.load("model/model_columns.joblib")
        app.state.known_models = [
            col.replace('model_', '')
            for col in app.state.model_columns if col.startswith('model_')
        ]
        print("✅ النموذج والأعمدة تم تحميلها بنجاح.")
    except Exception as e:
        print(f"❌ خطأ في تحميل النموذج: {e}")
        app.state.model = None
    yield
    print("🔚 إيقاف التطبيق.")

app = FastAPI(
    title="🚗 Car Price Prediction API",
    description="نموذج توقع أسعار السيارات باستخدام FastAPI",
    lifespan=lifespan
)

# --- نقطة التوقع ---
@app.post("/predict")
def predict_price(
    brand: str = Form(...),
    model_name: str = Form(...),
    year: int = Form(...),
    mileage: int = Form(...),
    engine_size: float = Form(...),
    cylinder: int = Form(...),
    fuel_type: str = Form(...),
    transmission: str = Form(...)
):
    if app.state.model is None:
        raise HTTPException(status_code=503, detail="النموذج غير جاهز.")

    # تحضير البيانات
    input_data = {
        "brand": brand,
        "model_name": model_name,
        "year": year,
        "mileage": mileage,
        "engine_size": engine_size,
        "cylinder": cylinder,
        "fuel_type": fuel_type,
        "transmission": transmission
    }

    if input_data["model_name"] not in app.state.known_models:
        input_data["model_name"] = "Other_Model"

    input_data["model"] = input_data.pop("model_name")
    input_df = pd.DataFrame([input_data])
    input_encoded = pd.get_dummies(input_df, drop_first=True, dtype=int)

    # إعادة ترتيب الأعمدة لتطابق النموذج
    final_input = pd.DataFrame(columns=app.state.model_columns, index=[0]).fillna(0.0)
    for col in input_encoded.columns:
        if col in final_input.columns:
            final_input.at[0, col] = input_encoded.at[0, col]

    # التنبؤ
    predicted_price = float(app.state.model.predict(final_input)[0])
    formatted_price = f"${max(0, predicted_price):,.2f}"
    return {"estimated_price_usd": formatted_price}